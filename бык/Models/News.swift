import Foundation
import SwiftUI

// –ú–æ–¥–µ–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –Ω–æ–≤–æ—Å—Ç–∏
struct NewsComment: Identifiable, Equatable {
    let id: UUID
    let author: String
    let text: String
    let date: Date
    
    init(
        id: UUID = UUID(),
        author: String,
        text: String,
        date: Date = Date()
    ) {
        self.id = id
        self.author = author
        self.text = text
        self.date = date
    }
}

struct NewsItem: Identifiable, Equatable {
    let id: UUID
    let title: String
    let description: String
    let image: String
    let date: Date
    let brand: Restaurant.Brand
    let type: NewsType
    var likes: Int
    var isLiked: Bool
    var comments: [NewsComment]
    var isRead: Bool
    
    static func == (lhs: NewsItem, rhs: NewsItem) -> Bool {
        lhs.id == rhs.id
    }
    
    init(
        id: UUID = UUID(),
        title: String,
        description: String,
        image: String,
        date: Date,
        brand: Restaurant.Brand,
        type: NewsType = .news,
        likes: Int = 0,
        isLiked: Bool = false,
        comments: [NewsComment] = [],
        isRead: Bool = false
    ) {
        self.id = id
        self.title = title
        self.description = description
        self.image = image
        self.date = date
        self.brand = brand
        self.type = type
        self.likes = likes
        self.isLiked = isLiked
        self.comments = comments
        self.isRead = isRead
    }
    
    // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–≤—å—é
    static let mock = NewsItem(
        title: "–ù–æ–≤–æ–µ —Å–µ–∑–æ–Ω–Ω–æ–µ –º–µ–Ω—é –≤ THE –ë–´–ö",
        description: "–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω–∞—à–µ –Ω–æ–≤–æ–µ —Å–µ–∑–æ–Ω–Ω–æ–µ –º–µ–Ω—é, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ª–µ—Ç–Ω–µ–≥–æ —Å–µ–∑–æ–Ω–∞. –ù–∞—à–∏ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–ª—é–¥–∞.",
        image: "XXL_height",
        date: Date(),
        brand: .theByk,
        type: .news,
        likes: 42,
        isLiked: false,
        comments: [
            NewsComment(author: "–ê–ª–µ–∫—Å–µ–π", text: "–û—Ç–ª–∏—á–Ω–æ–µ –º–µ–Ω—é! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É—é."),
            NewsComment(author: "–ú–∞—Ä–∏—è", text: "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ?"),
            NewsComment(author: "–î–º–∏—Ç—Ä–∏–π", text: "–í—ã–≥–ª—è–¥–∏—Ç –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ! üëç")
        ],
        isRead: false
    )
}

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
enum NewsType: String, CaseIterable {
    case news = "–ù–æ–≤–æ—Å—Ç–∏"
    case event = "–°–æ–±—ã—Ç–∏—è"
    case promotion = "–ê–∫—Ü–∏–∏"
    case announcement = "–ê–Ω–æ–Ω—Å—ã"
    case update = "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    
    var icon: String {
        switch self {
        case .news: return "newspaper"
        case .event: return "calendar"
        case .promotion: return "tag"
        case .announcement: return "megaphone"
        case .update: return "arrow.triangle.2.circlepath"
        }
    }
    
    var color: Color {
        switch self {
        case .news: return .blue
        case .event: return .purple
        case .promotion: return .orange
        case .announcement: return .green
        case .update: return .gray
        }
    }
} 