import Foundation

struct Dish: Identifiable, Codable, Equatable {
    let id: UUID
    let name: String
    let description: String
    let price: Double
    let image: String
    let category: String
    let restaurantBrand: Restaurant.Brand
    let isAvailable: Bool
    let preparationTime: Int // –≤ –º–∏–Ω—É—Ç–∞—Ö
    let calories: Int
    let allergens: [String]
    
    init(name: String, description: String, price: Double, image: String, category: String, restaurantBrand: Restaurant.Brand, isAvailable: Bool = true, preparationTime: Int = 20, calories: Int = 0, allergens: [String] = []) {
        self.id = UUID()
        self.name = name
        self.description = description
        self.price = price
        self.image = image
        self.category = category
        self.restaurantBrand = restaurantBrand
        self.isAvailable = isAvailable
        self.preparationTime = preparationTime
        self.calories = calories
        self.allergens = allergens
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º UUID (–¥–ª—è API –¥–∞–Ω–Ω—ã—Ö)
    init(id: UUID, name: String, description: String, price: Double, image: String, category: String, restaurantBrand: Restaurant.Brand, isAvailable: Bool = true, preparationTime: Int = 20, calories: Int = 0, allergens: [String] = []) {
        self.id = id
        self.name = name
        self.description = description
        self.price = price
        self.image = image
        self.category = category
        self.restaurantBrand = restaurantBrand
        self.isAvailable = isAvailable
        self.preparationTime = preparationTime
        self.calories = calories
        self.allergens = allergens
    }
}

// MARK: - Delivery Order Model
struct DeliveryOrder: Identifiable, Codable {
    let id: UUID
    let orderNumber: String
    let items: [DeliveryOrderItem]
    let totalAmount: Double
    let deliveryAddress: String
    let deliveryTime: Date
    let orderDate: Date
    let status: DeliveryOrderStatus
    let restaurantBrand: Restaurant.Brand
    let deliveryFee: Double
    let tip: Double?
    let estimatedDeliveryTime: Date?
    let actualDeliveryTime: Date?
    let courierName: String?
    let courierPhone: String?
    let paymentMethod: DeliveryPaymentMethod
    let specialInstructions: String?
    
    init(orderNumber: String, items: [DeliveryOrderItem], totalAmount: Double, deliveryAddress: String, deliveryTime: Date, orderDate: Date, status: DeliveryOrderStatus, restaurantBrand: Restaurant.Brand, deliveryFee: Double, tip: Double? = nil, estimatedDeliveryTime: Date? = nil, actualDeliveryTime: Date? = nil, courierName: String? = nil, courierPhone: String? = nil, paymentMethod: DeliveryPaymentMethod, specialInstructions: String? = nil) {
        self.id = UUID()
        self.orderNumber = orderNumber
        self.items = items
        self.totalAmount = totalAmount
        self.deliveryAddress = deliveryAddress
        self.deliveryTime = deliveryTime
        self.orderDate = orderDate
        self.status = status
        self.restaurantBrand = restaurantBrand
        self.deliveryFee = deliveryFee
        self.tip = tip
        self.estimatedDeliveryTime = estimatedDeliveryTime
        self.actualDeliveryTime = actualDeliveryTime
        self.courierName = courierName
        self.courierPhone = courierPhone
        self.paymentMethod = paymentMethod
        self.specialInstructions = specialInstructions
    }
}

struct DeliveryOrderItem: Identifiable, Codable {
    let id: UUID
    let dish: Dish
    let quantity: Int
    let price: Double
    let specialInstructions: String?
    
    init(dish: Dish, quantity: Int, price: Double, specialInstructions: String? = nil) {
        self.id = UUID()
        self.dish = dish
        self.quantity = quantity
        self.price = price
        self.specialInstructions = specialInstructions
    }
}

enum DeliveryOrderStatus: String, CaseIterable, Codable {
    case pending = "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    case confirmed = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    case preparing = "–ì–æ—Ç–æ–≤–∏—Ç—Å—è"
    case ready = "–ì–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ"
    case delivering = "–í –ø—É—Ç–∏"
    case delivered = "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
    case cancelled = "–û—Ç–º–µ–Ω–µ–Ω"
    
    var color: String {
        switch self {
        case .pending: return "orange"
        case .confirmed: return "blue"
        case .preparing: return "purple"
        case .ready: return "yellow"
        case .delivering: return "green"
        case .delivered: return "green"
        case .cancelled: return "red"
        }
    }
    
    var icon: String {
        switch self {
        case .pending: return "clock"
        case .confirmed: return "checkmark.circle"
        case .preparing: return "flame"
        case .ready: return "bag"
        case .delivering: return "bicycle"
        case .delivered: return "checkmark.shield"
        case .cancelled: return "xmark.circle"
        }
    }
}

enum DeliveryPaymentMethod: String, CaseIterable, Codable {
    case card = "–ö–∞—Ä—Ç–∞"
    case cash = "–ù–∞–ª–∏—á–Ω—ã–µ"
    case online = "–û–Ω–ª–∞–π–Ω"
    
    var icon: String {
        switch self {
        case .card: return "creditcard"
        case .cash: return "banknote"
        case .online: return "globe"
        }
    }
}

struct NutritionFacts: Equatable {
    let calories: Double
    let proteins: Double
    let fats: Double
    let carbs: Double
}

enum DishCategory: String, CaseIterable {
    case starters = "–ó–∞–∫—É—Å–∫–∏"
    case soups = "–°—É–ø—ã"
    case salads = "–°–∞–ª–∞—Ç—ã"
    case mainCourse = "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞"
    case steaks = "–°—Ç–µ–π–∫–∏"
    case seafood = "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã"
    case pasta = "–ü–∞—Å—Ç–∞"
    case pizza = "–ü–∏—Ü—Ü–∞"
    case sides = "–ì–∞—Ä–Ω–∏—Ä—ã"
    case desserts = "–î–µ—Å–µ—Ä—Ç—ã"
    case drinks = "–ù–∞–ø–∏—Ç–∫–∏"
    case alcohol = "–ê–ª–∫–æ–≥–æ–ª—å"
}

enum DishTag: String, CaseIterable {
    case vegetarian = "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ"
    case vegan = "–í–µ–≥–∞–Ω—Å–∫–æ–µ"
    case glutenFree = "–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞"
    case lactoseFree = "–ë–µ–∑ –ª–∞–∫—Ç–æ–∑—ã"
    case spicy = "–û—Å—Ç—Ä–æ–µ"
    case halal = "–•–∞–ª—è–ª—å"
    case kosher = "–ö–æ—à–µ—Ä–Ω–æ–µ"
    case chefSpecial = "–í—ã–±–æ—Ä —à–µ—Ñ–∞"
    case seasonal = "–°–µ–∑–æ–Ω–Ω–æ–µ"
    case bestseller = "–•–∏—Ç –ø—Ä–æ–¥–∞–∂"
}

enum SpicyLevel: Int, CaseIterable {
    case none = 0
    case mild = 1
    case medium = 2
    case hot = 3
    case extraHot = 4
    
    var description: String {
        switch self {
        case .none: return "–ù–µ –æ—Å—Ç—Ä–æ–µ"
        case .mild: return "–°–ª–∞–±–æ –æ—Å—Ç—Ä–æ–µ"
        case .medium: return "–£–º–µ—Ä–µ–Ω–Ω–æ –æ—Å—Ç—Ä–æ–µ"
        case .hot: return "–û—Å—Ç—Ä–æ–µ"
        case .extraHot: return "–û—á–µ–Ω—å –æ—Å—Ç—Ä–æ–µ"
        }
    }
    
    var icon: String {
        switch self {
        case .none: return ""
        case .mild: return "üå∂"
        case .medium: return "üå∂üå∂"
        case .hot: return "üå∂üå∂üå∂"
        case .extraHot: return "üå∂üå∂üå∂üå∂"
        }
    }
} 