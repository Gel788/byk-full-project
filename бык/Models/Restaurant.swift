import Foundation
import SwiftUI
import CoreLocation

// –ú–æ–¥–µ–ª—å —Å–µ—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
struct RestaurantNetwork: Identifiable {
    let id = UUID()
    let brand: RestaurantBrand
    let name: String
    let description: String
    let foundedYear: Int
    let restaurants: [Restaurant]
    let news: [NewsItem]
    let specialOffers: [SpecialOffer]
}

// –ú–æ–¥–µ–ª—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
struct Restaurant: Identifiable, Hashable, Codable {
    let id: UUID
    let name: String
    let description: String
    let address: String
    let city: String
    let imageURL: String
    let rating: Double
    let cuisine: String
    let deliveryTime: Int
    let brand: Brand
    let menu: [Dish]
    let features: Set<Feature>
    let workingHours: WorkingHours
    let location: Location
    let tables: [Table]
    let gallery: [GalleryImage]
    let contacts: ContactInfo
    let averageCheck: Int
    let atmosphere: [String]
    
    // MARK: - Hashable Implementation
    func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
    
    // MARK: - Equatable Implementation
    static func == (lhs: Restaurant, rhs: Restaurant) -> Bool {
        lhs.id == rhs.id
    }
    
    init(
        id: UUID = UUID(),
        name: String,
        description: String,
        address: String,
        city: String,
        imageURL: String,
        rating: Double,
        cuisine: String,
        deliveryTime: Int,
        brand: Brand,
        menu: [Dish],
        features: Set<Feature>,
        workingHours: WorkingHours,
        location: Location,
        tables: [Table],
        gallery: [GalleryImage] = [],
        contacts: ContactInfo = ContactInfo(),
        averageCheck: Int = 2000,
        atmosphere: [String] = []
    ) {
        self.id = id
        self.name = name
        self.description = description
        self.address = address
        self.city = city
        self.imageURL = imageURL
        self.rating = rating
        self.cuisine = cuisine
        self.deliveryTime = deliveryTime
        self.brand = brand
        self.menu = menu
        self.features = features
        self.workingHours = workingHours
        self.location = location
        self.tables = tables
        self.gallery = gallery
        self.contacts = contacts
        self.averageCheck = averageCheck
        self.atmosphere = atmosphere
    }
    
    enum Brand: String, CaseIterable, Codable {
        case theByk = "THE –ë–´–ö"
        case thePivo = "THE –ü–ò–í–û"
        case mosca = "MOSCA"
        case theGeorgia = "THE –ì–†–£–ó–ò–Ø"
        
        var displayName: String {
            switch self {
            case .theByk: return "–ë–´–ö"
            case .thePivo: return "–ü–ò–í–û"
            case .mosca: return "MOSCA"
            case .theGeorgia: return "–ì–†–£–ó–ò–Ø"
            }
        }
        
        var emoji: String {
            switch self {
            case .theByk: return "üêÇ"
            case .thePivo: return "üç∫"
            case .mosca: return "üç∑"
            case .theGeorgia: return "üçá"
            }
        }
    }
    
    enum Feature: String, Codable {
        case parking = "–ü–∞—Ä–∫–æ–≤–∫–∞"
        case wifi = "Wi-Fi"
        case reservation = "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
        case cardPayment = "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π"
        case delivery = "–î–æ—Å—Ç–∞–≤–∫–∞"
        case takeaway = "–ù–∞–≤—ã–Ω–æ—Å"
        case liveMusic = "–ñ–∏–≤–∞—è –º—É–∑—ã–∫–∞"
        case summerTerrace = "–õ–µ—Ç–Ω—è—è —Ç–µ—Ä—Ä–∞—Å–∞"
        case businessLunch = "–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á"
        case hookah = "–ö–∞–ª—å—è–Ω"
        case playground = "–î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞"
        case privateRoom = "VIP-–∫–æ–º–Ω–∞—Ç–∞"
        
        var icon: String {
            switch self {
            case .parking: return "car"
            case .wifi: return "wifi"
            case .reservation: return "calendar"
            case .cardPayment: return "creditcard"
            case .delivery: return "bicycle"
            case .takeaway: return "bag"
            case .liveMusic: return "music.note"
            case .summerTerrace: return "sun.max"
            case .businessLunch: return "briefcase"
            case .hookah: return "smoke"
            case .playground: return "figure.and.child.holdinghands"
            case .privateRoom: return "lock"
            }
        }
    }
}

struct GalleryImage: Identifiable, Hashable, Codable {
    let id: UUID = UUID()
    let imageURL: String
    let description: String
}

struct ContactInfo: Hashable, Codable {
    var phone: String = "+7 (999) 123-45-67"
    var email: String = "info@restaurant.com"
    var website: String = "www.restaurant.com"
    var instagram: String = "@restaurant"
    var facebook: String = "restaurant"
}

struct Location: Hashable, Codable {
    let latitude: Double
    let longitude: Double
    
    var coordinate: CLLocationCoordinate2D {
        CLLocationCoordinate2D(latitude: latitude, longitude: longitude)
    }
    
    // MARK: - Hashable Implementation
    func hash(into hasher: inout Hasher) {
        hasher.combine(latitude)
        hasher.combine(longitude)
    }
    
    static func == (lhs: Location, rhs: Location) -> Bool {
        lhs.latitude == rhs.latitude && lhs.longitude == rhs.longitude
    }
}

struct WorkingHours: Hashable, Codable {
    let openTime: String
    let closeTime: String
    let weekdays: Set<Weekday>
    
    static let `default` = WorkingHours(
        openTime: "10:00",
        closeTime: "23:00",
        weekdays: Set(Weekday.allCases)
    )
    
    func isOpen(at date: Date = Date()) -> Bool {
        let calendar = Calendar.current
        let weekday = calendar.component(.weekday, from: date)
        let currentWeekday = Weekday(rawValue: weekday)!
        
        guard weekdays.contains(currentWeekday) else { return false }
        
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm"
        let currentTimeString = formatter.string(from: date)
        
        return currentTimeString >= openTime && currentTimeString <= closeTime
    }
    
    enum Weekday: Int, CaseIterable, Codable {
        case sunday = 1
        case monday = 2
        case tuesday = 3
        case wednesday = 4
        case thursday = 5
        case friday = 6
        case saturday = 7
    }
}

struct Table: Identifiable, Hashable, Codable {
    let id: UUID = UUID()
    let number: Int
    let capacity: Int
    let isAvailable: Bool
    let location: TableLocation
    
    enum TableLocation: String, Hashable, Codable {
        case main = "–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª"
        case terrace = "–¢–µ—Ä—Ä–∞—Å–∞"
        case vip = "VIP-–∑–æ–Ω–∞"
        case bar = "–£ –±–∞—Ä–∞"
        case window = "–£ –æ–∫–Ω–∞"
    }
    
    // MARK: - Hashable Implementation
    func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
    
    static func == (lhs: Table, rhs: Table) -> Bool {
        lhs.id == rhs.id
    }
    
    static var mockTables: [Table] {
        [
            Table(number: 1, capacity: 2, isAvailable: true, location: .window),
            Table(number: 2, capacity: 4, isAvailable: true, location: .main),
            Table(number: 3, capacity: 6, isAvailable: true, location: .terrace),
            Table(number: 4, capacity: 2, isAvailable: true, location: .bar),
            Table(number: 5, capacity: 8, isAvailable: true, location: .vip)
        ]
    }
}

// –ú–æ–¥–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
struct SpecialOffer: Identifiable, Equatable {
    let id = UUID()
    let title: String
    let description: String
    let imageURL: String
    let validUntil: Date
    let discount: Int
    let conditions: String
    
    static func == (lhs: SpecialOffer, rhs: SpecialOffer) -> Bool {
        lhs.id == rhs.id
    }
}

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
enum Weekday: Int, CaseIterable {
    case monday = 1, tuesday, wednesday, thursday, friday, saturday, sunday
    
    var name: String {
        switch self {
        case .monday: return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
        case .tuesday: return "–í—Ç–æ—Ä–Ω–∏–∫"
        case .wednesday: return "–°—Ä–µ–¥–∞"
        case .thursday: return "–ß–µ—Ç–≤–µ—Ä–≥"
        case .friday: return "–ü—è—Ç–Ω–∏—Ü–∞"
        case .saturday: return "–°—É–±–±–æ—Ç–∞"
        case .sunday: return "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
    }
}

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
enum RestaurantFeature: String {
    case parking = "–ü–∞—Ä–∫–æ–≤–∫–∞"
    case wifi = "Wi-Fi"
    case delivery = "–î–æ—Å—Ç–∞–≤–∫–∞"
    case takeaway = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    case reservation = "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    case cardPayment = "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π"
    case liveMusic = "–ñ–∏–≤–∞—è –º—É–∑—ã–∫–∞"
    case summerTerrace = "–õ–µ—Ç–Ω—è—è —Ç–µ—Ä—Ä–∞—Å–∞"
    case businessLunch = "–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á"
    case childRoom = "–î–µ—Ç—Å–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞"
    
    var icon: String {
        switch self {
        case .parking: return "car"
        case .wifi: return "wifi"
        case .delivery: return "bicycle"
        case .takeaway: return "bag"
        case .reservation: return "calendar"
        case .cardPayment: return "creditcard"
        case .liveMusic: return "music.note"
        case .summerTerrace: return "sun.max"
        case .businessLunch: return "briefcase"
        case .childRoom: return "figure.2.and.child.holdinghands"
        }
    }
}

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
enum RestaurantBrand {
    case theByk
    case thePivo
    case mosca
    case theGeorgia
    
    var colors: (primary: Color, secondary: Color, accent: Color) {
        switch self {
        case .theByk:
            return (Colors.bykPrimary, Colors.bykSecondary, Colors.bykAccent)
        case .thePivo:
            return (Colors.pivoPrimary, Colors.pivoSecondary, Colors.pivoAccent)
        case .mosca:
            return (Colors.moscaPrimary, Colors.moscaSecondary, Colors.moscaAccent)
        case .theGeorgia:
            return (Colors.georgiaPrimary, Colors.georgiaSecondary, Colors.georgiaAccent)
        }
    }
    
    var font: Font {
        switch self {
        case .theByk:
            return .custom("PlayfairDisplay-Bold", size: 24)
        case .thePivo:
            return .custom("Roboto-Bold", size: 24)
        case .mosca:
            return .custom("Montserrat-Bold", size: 24)
        case .theGeorgia:
            return .custom("PlayfairDisplay-Bold", size: 24)
        }
    }
    
    var networkName: String {
        switch self {
        case .theByk:
            return "THE –ë–´–ö"
        case .thePivo:
            return "THE –ü–ò–í–û"
        case .mosca:
            return "MOSCA"
        case .theGeorgia:
            return "THE –ì–†–£–ó–ò–Ø"
        }
    }
    
    var description: String {
        switch self {
        case .theByk:
            return "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å—Ç–µ–π–∫-—Ö–∞—É—Å –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –ú–æ—Å–∫–≤—ã. –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤ –∏–∑ –æ—Ç–±–æ—Ä–Ω–æ–π –º—Ä–∞–º–æ—Ä–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω—ã. –£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –±–æ–≥–∞—Ç–∞—è –≤–∏–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–¥–µ–ª–∞—é—Ç –≤–∞—à –≤–µ—á–µ—Ä –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º."
        case .thePivo:
            return "–ö—Ä–∞—Ñ—Ç–æ–≤—ã–π –ø–∏–≤–Ω–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å –±–æ–≥–∞—Ç—ã–º –≤—ã–±–æ—Ä–æ–º –ø–∏–≤–∞ –∏ –∑–∞–∫—É—Å–æ–∫"
        case .mosca:
            return "–ê—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏"
        case .theGeorgia:
            return "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å—Ç–µ–π–∫-—Ö–∞—É—Å –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –ú–æ—Å–∫–≤—ã. –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤ –∏–∑ –æ—Ç–±–æ—Ä–Ω–æ–π –º—Ä–∞–º–æ—Ä–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω—ã. –£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –±–æ–≥–∞—Ç–∞—è –≤–∏–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–¥–µ–ª–∞—é—Ç –≤–∞—à –≤–µ—á–µ—Ä –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º."
        }
    }
}

enum CuisineType: String {
    case steakhouse = "–°—Ç–µ–π–∫-—Ö–∞—É—Å"
    case european = "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è"
    case italian = "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è"
    case craft = "–ö—Ä–∞—Ñ—Ç–æ–≤–∞—è"
    case local = "–õ–æ–∫–∞–ª—å–Ω–∞—è"
} 

// MARK: - Mock Data
extension Restaurant {
    static var mock: Restaurant {
        Restaurant(
            name: "THE –ë–´–ö –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π",
            description: "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å—Ç–µ–π–∫-—Ö–∞—É—Å –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –ú–æ—Å–∫–≤—ã. –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤ –∏–∑ –æ—Ç–±–æ—Ä–Ω–æ–π –º—Ä–∞–º–æ—Ä–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω—ã. –£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –±–æ–≥–∞—Ç–∞—è –≤–∏–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–¥–µ–ª–∞—é—Ç –≤–∞—à –≤–µ—á–µ—Ä –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º.",
            address: "—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15",
            city: "–ú–æ—Å–∫–≤–∞",
            imageURL: "thebyk_main",
            rating: 4.8,
            cuisine: "–°—Ç–µ–π–∫-—Ö–∞—É—Å",
            deliveryTime: 45,
            brand: .theByk,
            menu: [
                Dish(
                    name: "–†–∏–±–∞–π —Å—Ç–µ–π–∫",
                    description: "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å—Ç–µ–π–∫ –∏–∑ –º—Ä–∞–º–æ—Ä–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω—ã",
                    price: 3200,
                    image: "ribai_steak",
                    category: "–°—Ç–µ–π–∫–∏",
                    restaurantBrand: .theByk
                ),
                Dish(
                    name: "–¶–µ–∑–∞—Ä—å —Å–∞–ª–∞—Ç",
                    description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω—ã–º —Ñ–∏–ª–µ –∏ —Å–æ—É—Å–æ–º –¶–µ–∑–∞—Ä—å",
                    price: 450,
                    image: "caesar_salad",
                    category: "–°–∞–ª–∞—Ç—ã",
                    restaurantBrand: .theByk
                ),
                Dish(
                    name: "–ö–∞—Ä–±–æ–Ω–∞—Ä–∞",
                    description: "–ü–∞—Å—Ç–∞ —Å –±–µ–∫–æ–Ω–æ–º, —è–π—Ü–æ–º –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º",
                    price: 650,
                    image: "pasta_carbonara",
                    category: "–ü–∞—Å—Ç–∞",
                    restaurantBrand: .theByk
                ),
                Dish(
                    name: "–ö—Ä–µ–≤–µ—Ç–∫–∏ –≥—Ä–∏–ª—å",
                    description: "–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ –∫—Ä–µ–≤–µ—Ç–∫–∏ –Ω–∞ –≥—Ä–∏–ª–µ —Å –ª–∏–º–æ–Ω–æ–º",
                    price: 890,
                    image: "ribai_steak",
                    category: "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
                    restaurantBrand: .theByk
                )
            ],
            features: [.parking, .wifi, .reservation, .cardPayment, .liveMusic],
            workingHours: WorkingHours(
                openTime: "10:00",
                closeTime: "23:00",
                weekdays: Set(WorkingHours.Weekday.allCases)
            ),
            location: Location(latitude: 55.7558, longitude: 37.6173),
            tables: Table.mockTables,
            gallery: [
                GalleryImage(imageURL: "thebyk_interior1", description: "–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª"),
                GalleryImage(imageURL: "thebyk_interior2", description: "–ë–∞—Ä–Ω–∞—è —Å—Ç–æ–π–∫–∞"),
                GalleryImage(imageURL: "thebyk_interior3", description: "VIP-–∑–∞–ª"),
                GalleryImage(imageURL: "thebyk_interior4", description: "–õ–µ—Ç–Ω—è—è —Ç–µ—Ä—Ä–∞—Å–∞")
            ],
            contacts: ContactInfo(
                phone: "+7 (495) 123-45-67",
                email: "info@thebyk.ru",
                website: "www.thebyk.ru",
                instagram: "@thebyk.msk",
                facebook: "thebyk.moscow"
            ),
            averageCheck: 3500,
            atmosphere: ["–£—é—Ç–Ω–∞—è", "–î–µ–ª–æ–≤–∞—è", "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è", "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è"]
        )
    }
    
    static var mockRestaurants: [Restaurant] {
        [
            mock,
            Restaurant(
                name: "THE –ü–ò–í–û –Ω–∞ –ê—Ä–±–∞—Ç–µ",
                description: "–ö—Ä–∞—Ñ—Ç–æ–≤–æ–µ –ø–∏–≤–æ –∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –∑–∞–∫—É—Å–∫–∏ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–º –±–∞—Ä–µ –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ —Å—Ç–∞—Ä–æ–π –ú–æ—Å–∫–≤—ã. –ë–æ–ª–µ–µ 30 —Å–æ—Ä—Ç–æ–≤ —Ä–∞–∑–ª–∏–≤–Ω–æ–≥–æ –ø–∏–≤–∞, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø–∏–≤–æ–≤–∞—Ä–Ω—è–º–∏ –∏ –∞–≤—Ç–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞.",
                address: "—É–ª. –ê—Ä–±–∞—Ç, 25",
                city: "–ú–æ—Å–∫–≤–∞",
                imageURL: "thepivo_main",
                rating: 4.6,
                cuisine: "–ü–∏–≤–Ω–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω",
                deliveryTime: 40,
                brand: .thePivo,
                menu: [
                    Dish(
                        name: "–§–∏—Ä–º–µ–Ω–Ω—ã–µ –∫–æ–ª–±–∞—Å–∫–∏",
                        description: "–ê—Å—Å–æ—Ä—Ç–∏ –∏–∑ —Ç—Ä–µ—Ö –≤–∏–¥–æ–≤ –∫–æ–ª–±–∞—Å–æ–∫ —Å –≥–∞—Ä–Ω–∏—Ä–∞–º–∏",
                        price: 890,
                        image: "sausages",
                        category: "–ó–∞–∫—É—Å–∫–∏",
                        restaurantBrand: .thePivo
                    ),
                    Dish(
                        name: "–ö—Ä–∞—Ñ—Ç–æ–≤–æ–µ –ø–∏–≤–æ",
                        description: "–°–≤–µ–∂–µ–µ –∫—Ä–∞—Ñ—Ç–æ–≤–æ–µ –ø–∏–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
                        price: 350,
                        image: "sausages",
                        category: "–ù–∞–ø–∏—Ç–∫–∏",
                        restaurantBrand: .thePivo
                    ),
                    Dish(
                        name: "–ë—Ä–µ—Ü–µ–ª—å",
                        description: "–ù–µ–º–µ—Ü–∫–∏–π –∫—Ä–µ–Ω–¥–µ–ª—å —Å —Å–æ–ª—å—é –∏ –≥–æ—Ä—á–∏—Ü–µ–π",
                        price: 250,
                        image: "pretzel",
                        category: "–ó–∞–∫—É—Å–∫–∏",
                        restaurantBrand: .thePivo
                    ),
                    Dish(
                        name: "–°—ã—Ä–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞",
                        description: "–ê—Å—Å–æ—Ä—Ç–∏ –∏–∑ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —Å—ã—Ä–æ–≤ —Å –æ—Ä–µ—Ö–∞–º–∏",
                        price: 650,
                        image: "sausages",
                        category: "–ó–∞–∫—É—Å–∫–∏",
                        restaurantBrand: .thePivo
                    )
                ],
                features: [.wifi, .delivery, .cardPayment, .summerTerrace],
                workingHours: WorkingHours(
                    openTime: "12:00",
                    closeTime: "00:00",
                    weekdays: Set(WorkingHours.Weekday.allCases)
                ),
                location: Location(latitude: 55.7494, longitude: 37.5995),
                tables: Table.mockTables,
                gallery: [],
                contacts: ContactInfo(
                    phone: "+7 (495) 234-56-78",
                    email: "info@thepivo.ru",
                    website: "www.thepivo.ru",
                    instagram: "@thepivo.msk"
                ),
                averageCheck: 2000,
                atmosphere: ["–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–∞—è", "–î—Ä—É–∂–µ—Å–∫–∞—è", "–®—É–º–Ω–∞—è"]
            ),
            Restaurant(
                name: "MOSCA –≤ –°–∏—Ç–∏",
                description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è —Å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–º –≤–∏–¥–æ–º –Ω–∞ –ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏. –ê—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–∏–Ω–æ—Ç–µ–∫–∞ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è.",
                address: "–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è –Ω–∞–±., 8—Å1",
                city: "–ú–æ—Å–∫–≤–∞",
                imageURL: "mosca_main",
                rating: 4.7,
                cuisine: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è",
                deliveryTime: 50,
                brand: .mosca,
                menu: [
                    Dish(
                        name: "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
                        description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π",
                        price: 650,
                        image: "pizza_margherita",
                        category: "–ü–∏—Ü—Ü–∞",
                        restaurantBrand: .mosca
                    ),
                    Dish(
                        name: "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞",
                        description: "–°–ø–∞–≥–µ—Ç—Ç–∏ —Å –±–µ–∫–æ–Ω–æ–º, —è–π—Ü–æ–º –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º",
                        price: 750,
                        image: "pasta_carbonara",
                        category: "–ü–∞—Å—Ç–∞",
                        restaurantBrand: .mosca
                    ),
                    Dish(
                        name: "–ë—Ä—É—Å–∫–µ—Ç—Ç–∞",
                        description: "–¢–æ—Å—Ç—ã —Å —Ç–æ–º–∞—Ç–∞–º–∏, –±–∞–∑–∏–ª–∏–∫–æ–º –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π",
                        price: 350,
                        image: "caesar_salad",
                        category: "–ó–∞–∫—É—Å–∫–∏",
                        restaurantBrand: .mosca
                    ),
                    Dish(
                        name: "–¢–∏—Ä–∞–º–∏—Å—É",
                        description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç",
                        price: 450,
                        image: "pizza_margherita",
                        category: "–î–µ—Å–µ—Ä—Ç—ã",
                        restaurantBrand: .mosca
                    )
                ],
                features: [.parking, .wifi, .reservation, .cardPayment, .businessLunch],
                workingHours: WorkingHours(
                    openTime: "11:00",
                    closeTime: "23:00",
                    weekdays: Set(WorkingHours.Weekday.allCases)
                ),
                location: Location(latitude: 55.7470, longitude: 37.5392),
                tables: Table.mockTables,
                gallery: [],
                contacts: ContactInfo(
                    phone: "+7 (495) 345-67-89",
                    email: "info@mosca.ru",
                    website: "www.mosca.ru",
                    instagram: "@mosca.msk"
                ),
                averageCheck: 2500,
                atmosphere: ["–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è", "–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è", "–ü–∞–Ω–æ—Ä–∞–º–Ω–∞—è"]
            ),
            Restaurant(
                name: "THE –ì–†–£–ó–ò–Ø –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π",
                description: "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å—Ç–µ–π–∫-—Ö–∞—É—Å –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –ú–æ—Å–∫–≤—ã. –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–µ–π–∫–æ–≤ –∏–∑ –æ—Ç–±–æ—Ä–Ω–æ–π –º—Ä–∞–º–æ—Ä–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω—ã. –£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –±–æ–≥–∞—Ç–∞—è –≤–∏–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–¥–µ–ª–∞—é—Ç –≤–∞—à –≤–µ—á–µ—Ä –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º.",
                address: "—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15",
                city: "–ú–æ—Å–∫–≤–∞",
                imageURL: "thegeorgia_main",
                rating: 4.8,
                cuisine: "–°—Ç–µ–π–∫-—Ö–∞—É—Å",
                deliveryTime: 45,
                brand: .theGeorgia,
                menu: [
                    Dish(
                        name: "–†–∏–±–∞–π —Å—Ç–µ–π–∫",
                        description: "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å—Ç–µ–π–∫ –∏–∑ –º—Ä–∞–º–æ—Ä–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω—ã",
                        price: 3200,
                        image: "ribai_steak",
                        category: "–°—Ç–µ–π–∫–∏",
                        restaurantBrand: .theGeorgia
                    ),
                    Dish(
                        name: "–¶–µ–∑–∞—Ä—å —Å–∞–ª–∞—Ç",
                        description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω—ã–º —Ñ–∏–ª–µ –∏ —Å–æ—É—Å–æ–º –¶–µ–∑–∞—Ä—å",
                        price: 450,
                        image: "caesar_salad",
                        category: "–°–∞–ª–∞—Ç—ã",
                        restaurantBrand: .theGeorgia
                    ),
                    Dish(
                        name: "–ö–∞—Ä–±–æ–Ω–∞—Ä–∞",
                        description: "–ü–∞—Å—Ç–∞ —Å –±–µ–∫–æ–Ω–æ–º, —è–π—Ü–æ–º –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º",
                        price: 650,
                        image: "pasta_carbonara",
                        category: "–ü–∞—Å—Ç–∞",
                        restaurantBrand: .theGeorgia
                    ),
                    Dish(
                        name: "–ö—Ä–µ–≤–µ—Ç–∫–∏ –≥—Ä–∏–ª—å",
                        description: "–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ –∫—Ä–µ–≤–µ—Ç–∫–∏ –Ω–∞ –≥—Ä–∏–ª–µ —Å –ª–∏–º–æ–Ω–æ–º",
                        price: 890,
                        image: "ribai_steak",
                        category: "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
                        restaurantBrand: .theGeorgia
                    )
                ],
                features: [.parking, .wifi, .reservation, .cardPayment, .liveMusic],
                workingHours: WorkingHours(
                    openTime: "10:00",
                    closeTime: "23:00",
                    weekdays: Set(WorkingHours.Weekday.allCases)
                ),
                location: Location(latitude: 55.7558, longitude: 37.6173),
                tables: Table.mockTables,
                gallery: [
                    GalleryImage(imageURL: "thegeorgia_interior1", description: "–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª"),
                    GalleryImage(imageURL: "thegeorgia_interior2", description: "–ë–∞—Ä–Ω–∞—è —Å—Ç–æ–π–∫–∞"),
                    GalleryImage(imageURL: "thegeorgia_interior3", description: "VIP-–∑–∞–ª"),
                    GalleryImage(imageURL: "thegeorgia_interior4", description: "–õ–µ—Ç–Ω—è—è —Ç–µ—Ä—Ä–∞—Å–∞")
                ],
                contacts: ContactInfo(
                    phone: "+7 (495) 123-45-67",
                    email: "info@thegeorgia.ru",
                    website: "www.thegeorgia.ru",
                    instagram: "@thegeorgia.msk",
                    facebook: "thegeorgia.moscow"
                ),
                averageCheck: 3500,
                atmosphere: ["–£—é—Ç–Ω–∞—è", "–î–µ–ª–æ–≤–∞—è", "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è", "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è"]
            )
        ]
    }
} 