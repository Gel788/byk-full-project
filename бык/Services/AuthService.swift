import Foundation
import SwiftUI
import Combine

class AuthService: ObservableObject {
    static let shared = AuthService()
    
    @Published var currentUser: User?
    @Published var isAuthenticated: Bool = false
    @Published var isLoading: Bool = false
    @Published var errorMessage: String?
    
    // –¢–æ–∫–µ–Ω—ã –¥–ª—è API
    @Published var accessToken: String?
    @Published var refreshToken: String?
    
    private let userDefaults = UserDefaults.standard
    private let userKey = "currentUser"
    private let accessTokenKey = "accessToken"
    private let refreshTokenKey = "refreshToken"
    
    private let apiService = APIService.shared
    private var cancellables = Set<AnyCancellable>()
    
    init() {
        loadUserFromStorage()
        loadTokensFromStorage()
    }
    
    // MARK: - Authentication Methods
    
    func register(with data: RegistrationData) async {
        print("üîê AuthService: –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("  - –ò–º—è: \(data.name)")
        print("  - –¢–µ–ª–µ—Ñ–æ–Ω: \(data.phoneNumber)")
        print("  - Email: \(data.email ?? "–Ω–µ —É–∫–∞–∑–∞–Ω")")
        print("  - –ü–∞—Ä–æ–ª—å: [–°–ö–†–´–¢]")
        
        await MainActor.run {
            isLoading = true
            errorMessage = nil
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è API
        let registerRequest = RegisterRequest(
            phoneNumber: data.phoneNumber,
            password: data.password,
            fullName: data.name,
            email: data.email
        )
        
        print("üîê AuthService: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        
        do {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            let response = try await withCheckedThrowingContinuation { continuation in
                apiService.register(registerRequest)
                    .sink(
                        receiveCompletion: { completion in
                            if case .failure(let error) = completion {
                                continuation.resume(throwing: error)
                            }
                        },
                        receiveValue: { response in
                            continuation.resume(returning: response)
                        }
                    )
                    .store(in: &cancellables)
            }
            
            await MainActor.run {
                if response.success, let userAPI = response.user, let token = response.token, let refreshToken = response.refreshToken {
                    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
                    print("AuthService: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:")
                    print("  - ID: \(userAPI.id)")
                    print("  - Phone: \(userAPI.phoneNumber)")
                    print("  - Name: \(userAPI.fullName)")
                    print("  - Email: \(userAPI.email ?? "nil")")
                    
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º API –º–æ–¥–µ–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω—É—é
                    let newUser = userAPI.toLocalUser()
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
                    print("AuthService: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å:")
                    print("  - ID: \(newUser.id)")
                    print("  - Phone: \(newUser.phoneNumber)")
                    print("  - Name: \(newUser.fullName)")
                    print("  - Email: \(newUser.email)")
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    self.currentUser = newUser
                    self.accessToken = token
                    self.refreshToken = refreshToken
                    self.isAuthenticated = true
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    self.saveCurrentUser(newUser)
                    self.saveTokens(token: token, refreshToken: refreshToken)
                    
                    print("AuthService: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ API")
                } else {
                    self.errorMessage = response.message
                }
                self.isLoading = false
            }
        } catch {
            await MainActor.run {
                print("AuthService: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - \(error)")
                self.errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                self.isLoading = false
            }
        }
    }
    
    func login(with credentials: AuthCredentials) async {
        print("üîê AuthService: –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("  - –¢–µ–ª–µ—Ñ–æ–Ω: \(credentials.phoneNumber)")
        print("  - –ü–∞—Ä–æ–ª—å: [–°–ö–†–´–¢]")
        
        await MainActor.run {
            isLoading = true
            errorMessage = nil
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è API
        let loginRequest = LoginRequest(
            phoneNumber: credentials.phoneNumber,
            password: credentials.password
        )
        
        print("üîê AuthService: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        
        do {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            let response = try await withCheckedThrowingContinuation { continuation in
                apiService.login(loginRequest)
                    .sink(
                        receiveCompletion: { completion in
                            if case .failure(let error) = completion {
                                continuation.resume(throwing: error)
                            }
                        },
                        receiveValue: { response in
                            continuation.resume(returning: response)
                        }
                    )
                    .store(in: &cancellables)
            }
            
            await MainActor.run {
                if response.success, let userAPI = response.user, let token = response.token, let refreshToken = response.refreshToken {
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º API –º–æ–¥–µ–ª—å –≤ –ª–æ–∫–∞–ª—å–Ω—É—é
                    let user = userAPI.toLocalUser()
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    self.currentUser = user
                    self.accessToken = token
                    self.refreshToken = refreshToken
                    self.isAuthenticated = true
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    self.saveCurrentUser(user)
                    self.saveTokens(token: token, refreshToken: refreshToken)
                    
                    print("AuthService: –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ API - \(user.fullName)")
                } else {
                    self.errorMessage = response.message
                }
                self.isLoading = false
            }
        } catch {
            await MainActor.run {
                print("AuthService: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ - \(error)")
                self.errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ"
                self.isLoading = false
            }
        }
    }
    
    func logout() async {
        print("üîê AuthService: –ù–∞—á–∏–Ω–∞–µ–º –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("  - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \(currentUser?.fullName ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")")
        print("  - –ï—Å—Ç—å —Ç–æ–∫–µ–Ω: \(accessToken != nil)")
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if let token = accessToken {
            print("üîê AuthService: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
            let logoutRequest = LogoutRequest(token: token)
            
            do {
                let response = try await withCheckedThrowingContinuation { continuation in
                    apiService.logout(logoutRequest)
                        .sink(
                            receiveCompletion: { completion in
                                if case .failure(let error) = completion {
                                    continuation.resume(throwing: error)
                                }
                            },
                            receiveValue: { response in
                                continuation.resume(returning: response)
                            }
                        )
                        .store(in: &cancellables)
                }
                
                print("üîê AuthService: –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ API - \(response.message)")
            } catch {
                print("üîê AuthService: –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ API - \(error)")
            }
        } else {
            print("üîê AuthService: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º API –∑–∞–ø—Ä–æ—Å")
        }
        
        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await MainActor.run {
            print("üîê AuthService: –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            currentUser = nil
            isAuthenticated = false
            accessToken = nil
            refreshToken = nil
            
            // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            userDefaults.removeObject(forKey: userKey)
            userDefaults.removeObject(forKey: accessTokenKey)
            userDefaults.removeObject(forKey: refreshTokenKey)
            
            print("üîê AuthService: –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—á–∏—â–µ–Ω—ã")
            print("  - isAuthenticated: \(isAuthenticated)")
            print("  - currentUser: \(currentUser?.fullName ?? "nil")")
        }
    }
    
    // MARK: - User Data Methods
    
    func getCurrentUser() -> User? {
        return currentUser
    }
    
    func updateCurrentUser(_ user: User) {
        print("AuthService: –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - \(user.fullName), \(user.email)")
        currentUser = user
        saveCurrentUser(user)
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        saveUser(user)
        print("AuthService: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    }
    
    // MARK: - Storage Methods
    
    private func saveUser(_ user: User) {
        if let encoded = try? JSONEncoder().encode(user) {
            userDefaults.set(encoded, forKey: "user_\(user.username)")
        }
    }
    
    private func getStoredUser(phoneNumber: String) -> User? {
        guard let data = userDefaults.data(forKey: "user_\(phoneNumber)"),
              let user = try? JSONDecoder().decode(User.self, from: data) else {
            return nil
        }
        return user
    }
    
    private func savePassword(phoneNumber: String, password: String) {
        userDefaults.set(password, forKey: "password_\(phoneNumber)")
    }
    
    private func getStoredPassword(phoneNumber: String) -> String? {
        return userDefaults.string(forKey: "password_\(phoneNumber)")
    }
    
    private func loadUserFromStorage() {
        guard let data = userDefaults.data(forKey: userKey),
              let user = try? JSONDecoder().decode(User.self, from: data) else {
            print("AuthService: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        }
        print("AuthService: –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ - \(user.fullName)")
        currentUser = user
        isAuthenticated = true
    }
    
    private func saveCurrentUser(_ user: User) {
        if let encoded = try? JSONEncoder().encode(user) {
            userDefaults.set(encoded, forKey: userKey)
        }
    }
    
    // MARK: - Token Management
    
    private func loadTokensFromStorage() {
        accessToken = userDefaults.string(forKey: accessTokenKey)
        refreshToken = userDefaults.string(forKey: refreshTokenKey)
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω—ã, —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
        if accessToken != nil && refreshToken != nil && currentUser != nil {
            isAuthenticated = true
        }
    }
    
    private func saveTokens(token: String, refreshToken: String) {
        userDefaults.set(token, forKey: accessTokenKey)
        userDefaults.set(refreshToken, forKey: refreshTokenKey)
    }
    
    // MARK: - Token Refresh
    
    func refreshAccessToken() async -> Bool {
        guard let refreshToken = refreshToken else {
            print("AuthService: –ù–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞")
            return false
        }
        
        do {
            let response = try await withCheckedThrowingContinuation { continuation in
                apiService.refreshToken(refreshToken)
                    .sink(
                        receiveCompletion: { completion in
                            if case .failure(let error) = completion {
                                continuation.resume(throwing: error)
                            }
                        },
                        receiveValue: { response in
                            continuation.resume(returning: response)
                        }
                    )
                    .store(in: &cancellables)
            }
            
            if response.success, let newToken = response.token, let newRefreshToken = response.refreshToken {
                await MainActor.run {
                    self.accessToken = newToken
                    self.refreshToken = newRefreshToken
                    self.saveTokens(token: newToken, refreshToken: newRefreshToken)
                }
                print("AuthService: –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return true
            }
        } catch {
            print("AuthService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ - \(error)")
        }
        
        return false
    }
    
    // MARK: - Profile Management
    
    func updateProfile(_ user: User) async {
        guard let token = accessToken else {
            print("AuthService: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º UserAPI –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ User
        let userAPI = UserAPI(
            id: user.id.uuidString,
            phoneNumber: user.username,
            fullName: user.fullName,
            email: user.email.isEmpty ? nil : user.email,
            avatar: user.avatar.isEmpty ? nil : user.avatar,
            isVerified: user.isVerified,
            followersCount: user.followersCount,
            followingCount: user.followingCount,
            postsCount: user.postsCount,
            createdAt: ISO8601DateFormatter().string(from: user.createdAt),
            updatedAt: ISO8601DateFormatter().string(from: Date()),
            role: "user",
            isActive: true
        )
        
        do {
            let updatedUser = try await withCheckedThrowingContinuation { continuation in
                apiService.updateProfile(token: token, user: userAPI)
                    .sink(
                        receiveCompletion: { completion in
                            if case .failure(let error) = completion {
                                continuation.resume(throwing: error)
                            }
                        },
                        receiveValue: { userAPI in
                            continuation.resume(returning: userAPI)
                        }
                    )
                    .store(in: &cancellables)
            }
            
            await MainActor.run {
                self.currentUser = updatedUser.toLocalUser()
                self.saveCurrentUser(self.currentUser!)
                print("AuthService: –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API")
            }
        } catch {
            print("AuthService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è - \(error)")
        }
    }
} 